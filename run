#!/usr/bin/python3

import json
import os
import shlex
import subprocess
import sys
import threading

from http.server import ThreadingHTTPServer
from http.server import SimpleHTTPRequestHandler

sys.path.append("scripts")
import data_util

MAPBOX_API_VARNAME = "MAPBOX_API_TOKEN"
with open("config.json") as f:
    CONFIG = json.loads(f.read())
    f.close()

if len(sys.argv) < 2:
    print("Please give me the disease ID as an argument, for instance 'covid-19'")
    sys.exit(1)

DISEASE_ID = sys.argv[1]

class VizHandler(SimpleHTTPRequestHandler):

    def send_head(self):
        if self.path in ["/js/main.js", "/js/diseasemap.js", "/js/sidebar.js"]:
            path = self.translate_path(self.path)
            f = open(path)
            contents = f.read()
            ctype = self.guess_type(path)
            self.send_response(200)
            self.send_header("Content-type", ctype)
            fs = os.fstat(f.fileno())
            self.send_header("Content-Length", str(fs[6]))
            self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
            self.end_headers()
            if "diseasemap" in self.path:
                contents = contents.replace("{{MAPBOX_API_TOKEN}}",
                                            os.environ[MAPBOX_API_VARNAME])
            if "sidebar" in self.path:
                contents = contents.replace(
                    "{{TITLE}}", CONFIG[DISEASE_ID]["name"])
            if "main" in self.path:
                contents = contents.replace(
                    "{{DATA_SRC_URL}}", CONFIG[DISEASE_ID]["data_src_url"])
            self.wfile.write(contents.encode())
            # We've taken care of everything, nothing left to do.
            return None
        return super().send_head()

# Returns True if everything we need is here, False otherwise.
def check_dependencies():
    try:
        subprocess.check_call(shlex.split("sass --version"))
    except (subprocess.CalledProcessError, OSError):
        print("Please install 'sass' first.")
        return False
    return True

def run_sass_precompiler():
    input_files = [f for f in os.listdir("css") if f.endswith(".scss")]
    if not len(input_files):
        return None
    return subprocess.call(shlex.split("sass --watch css:css"))


def run_http_server():
    server = ThreadingHTTPServer(("localhost", 8000), VizHandler)
    server.serve_forever()

def run():
    data_util.make_country_pages()

    if MAPBOX_API_VARNAME not in os.environ:
        print("Please set the 'MAPBOX_API_TOKEN' to your development token. "
              "Aborting.")
        print(os.environ)
        sys.exit(1)

    try:
        http = threading.Thread(target=run_http_server)
        sass = threading.Thread(target=run_sass_precompiler)
        http.start()
        sass.start()
        http.join()
        sass.join()

    except KeyboardInterrupt:
        print("Hit Crtl-C a second time to shut down.")
        sys.exit(0)

if __name__ == '__main__':
    if not check_dependencies():
        sys.exit(1)

    run()
